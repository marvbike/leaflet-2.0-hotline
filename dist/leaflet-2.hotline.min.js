import{Canvas,Polyline,LatLng,LineUtil}from"leaflet";class Palette{constructor(){this.palette({0:"green",.5:"yellow",1:"red"})}palette(t){const e=document.createElement("canvas"),n=e.getContext("2d"),o=n.createLinearGradient(0,0,0,256);e.width=1,e.height=256;for(const e in t)o.addColorStop(Number(e),t[e]);return n.fillStyle=o,n.fillRect(0,0,1,256),this._palette=n.getImageData(0,0,1,256).data,this}getRGBForValue(t,e,n){const o=Math.min(Math.max((t-e)/(n-e),0),.999),i=4*Math.floor(256*o);return[this._palette[i],this._palette[i+1],this._palette[i+2]]}}const HotlineUtil={_lastCode:void 0,clipSegment(t,e,n,o,i){let r,l,s,a=o?this._lastCode:LineUtil._getBitCode(t,n),h=LineUtil._getBitCode(e,n);for(this._lastCode=h;;){if(!(a|h))return[t,e];if(a&h)return!1;r=a||h,l=LineUtil._getEdgeIntersection(t,e,r,n,i),s=LineUtil._getBitCode(l,n),r===a?(l.z=t.z,t=l,a=s):(l.z=e.z,e=l,h=s)}}};class HotlineCanvasRenderer extends Canvas{constructor(t){super(t),this._palette=new Palette}_updatePoly(t){if(!this._drawing)return;const e=t._parts;if(!e.length)return;const n=t.options,o=this._ctx;if(this._palette.palette(n.palette),o.lineCap="round",n.outlineWidth){o.lineWidth=n.weight+2*n.outlineWidth,o.strokeStyle=n.outlineColor;for(const t of e)for(let e=1;e<t.length;e++){const n=t[e-1],i=t[e];o.beginPath(),o.moveTo(n.x,n.y),o.lineTo(i.x,i.y),o.stroke()}}o.lineWidth=n.weight;for(const t of e)for(let e=1;e<t.length;e++){const i=t[e-1],r=t[e],l=o.createLinearGradient(i.x,i.y,r.x,r.y),s=this._palette.getRGBForValue(i.z,n.min,n.max),a=this._palette.getRGBForValue(r.z,n.min,n.max);l.addColorStop(0,`rgb(${s.join(",")})`),l.addColorStop(1,`rgb(${a.join(",")})`),o.strokeStyle=l,o.beginPath(),o.moveTo(i.x,i.y),o.lineTo(r.x,r.y),o.stroke()}}}const hotlineRenderer=t=>new HotlineCanvasRenderer(t);export class HotlinePolyline extends Polyline{constructor(t,e){super(t,e)}beforeAdd(t){var e;this.options.renderer=(e=this.options,new HotlineCanvasRenderer(e)),super.beforeAdd(t)}_projectLatlngs(t,e,n){if(t[0]instanceof LatLng){const o=[];for(let e=0;e<t.length;e++)o[e]=this._map.latLngToLayerPoint(t[e]),o[e].z=t[e].alt,n.extend(o[e]);e.push(o)}else for(let o=0;o<t.length;o++)this._projectLatlngs(t[o],e,n)}_clipPoints(){if(this.options.noClip)return void(this._parts=this._rings);if(this._parts=[],!this._renderer||!this._renderer._bounds)return;const t=this._parts,e=this._renderer._bounds;for(let n=0,o=0,i=this._rings.length;n<i;n++){const i=this._rings[n];for(let n=0,r=i.length;n<r-1;n++){const l=HotlineUtil.clipSegment(i[n],i[n+1],e,n,!0);l&&(t[o]=t[o]||[],t[o].push(l[0]),l[1]===i[n+1]&&n!==r-2||(t[o].push(l[1]),o++))}}}}export function hotline(t,e){return new HotlinePolyline(t,e)}export default HotlinePolyline;