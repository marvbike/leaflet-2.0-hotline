import{SVG,Canvas,Polyline,LatLng,LineUtil,Browser}from"leaflet";class Palette{constructor(){this.palette({0:"green",.5:"yellow",1:"red"})}palette(t){const e=document.createElement("canvas"),i=e.getContext("2d"),n=i.createLinearGradient(0,0,0,256);e.width=1,e.height=256;for(const e in t)n.addColorStop(Number(e),t[e]);return i.fillStyle=n,i.fillRect(0,0,1,256),this._palette=i.getImageData(0,0,1,256).data,this}getRGBForValue(t,e,i){const n=Math.min(Math.max((t-e)/(i-e),0),.999),o=4*Math.floor(256*n);return[this._palette[o],this._palette[o+1],this._palette[o+2]]}}const HotlineUtil={_lastCode:void 0,clipSegment(t,e,i,n,o){let r,s,l,a=n?this._lastCode:LineUtil._getBitCode(t,i),h=LineUtil._getBitCode(e,i);for(this._lastCode=h;;){if(!(a|h))return[t,e];if(a&h)return!1;r=a||h,s=LineUtil._getEdgeIntersection(t,e,r,i,o),l=LineUtil._getBitCode(s,i),r===a?(s.z=t.z,t=s,a=l):(s.z=e.z,e=s,h=l)}}};class HotlineCanvasRenderer extends Canvas{constructor(t){super(t),this._palette=new Palette}_updatePoly(t){if(!this._drawing)return;const e=t._parts;if(!e.length)return;const i=t.options,n=this._ctx;if(this._palette.palette(i.palette),n.lineCap="round",i.outlineWidth){n.lineWidth=i.weight+2*i.outlineWidth,n.strokeStyle=i.outlineColor;for(const t of e)for(let e=1;e<t.length;e++){const i=t[e-1],o=t[e];n.beginPath(),n.moveTo(i.x,i.y),n.lineTo(o.x,o.y),n.stroke()}}n.lineWidth=i.weight;for(const t of e)for(let e=1;e<t.length;e++){const o=t[e-1],r=t[e],s=n.createLinearGradient(o.x,o.y,r.x,r.y),l=this._palette.getRGBForValue(o.z,i.min,i.max),a=this._palette.getRGBForValue(r.z,i.min,i.max);s.addColorStop(0,`rgb(${l.join(",")})`),s.addColorStop(1,`rgb(${a.join(",")})`),n.strokeStyle=s,n.beginPath(),n.moveTo(o.x,o.y),n.lineTo(r.x,r.y),n.stroke()}}}class HotlineSVGRenderer extends SVG{constructor(t){super(t),this._palette=new Palette}_initContainer(){super._initContainer(),this._hotlineDefs=SVG.create("defs"),this._container.appendChild(this._hotlineDefs)}_initPath(t){const e=t._path=SVG.create("g");t.options.className&&e.classList.add(...t.options.className.split(" ")),t.options.interactive&&e.classList.add("leaflet-interactive")}_updateStyle(){}_updatePoly(t){if(!this._container)return;this._hotlineDefs.innerHTML="";const e=t._path;e.innerHTML="";const i=t._parts;if(!i.length)return;const n=t.options;this._palette.palette(n.palette);const o=SVG.create("g"),r=SVG.create("g");for(let t=0;t<i.length;t++){const e=i[t];for(let i=1;i<e.length;i++){const s=e[i-1],l=e[i],a=`hotline-grad-${t}-${i}`,h=SVG.create("linearGradient");h.setAttribute("id",a),h.setAttribute("x1",s.x),h.setAttribute("y1",s.y),h.setAttribute("x2",l.x),h.setAttribute("y2",l.y),h.setAttribute("gradientUnits","userSpaceOnUse");const d=this._palette.getRGBForValue(s.z,n.min,n.max),p=SVG.create("stop");p.setAttribute("offset","0%"),p.setAttribute("stop-color",`rgb(${d.join(",")})`),h.appendChild(p);const c=this._palette.getRGBForValue(l.z,n.min,n.max),u=SVG.create("stop");if(u.setAttribute("offset","100%"),u.setAttribute("stop-color",`rgb(${c.join(",")})`),h.appendChild(u),this._hotlineDefs.appendChild(h),n.outlineWidth>0){const t=SVG.create("path");t.setAttribute("d",`M${s.x} ${s.y} L ${l.x} ${l.y}`),t.setAttribute("stroke",n.outlineColor),t.setAttribute("stroke-width",(n.weight+2*n.outlineWidth).toString()),t.setAttribute("stroke-linecap","round"),t.setAttribute("fill","none"),o.appendChild(t)}const _=SVG.create("path");_.setAttribute("d",`M${s.x} ${s.y} L ${l.x} ${l.y}`),_.setAttribute("stroke",`url(#${a})`),_.setAttribute("stroke-width",n.weight.toString()),_.setAttribute("stroke-linecap","round"),_.setAttribute("fill","none"),r.appendChild(_)}}e.appendChild(o),e.appendChild(r)}}const hotlineRenderer=t=>"canvas"===t.rendererType?new HotlineCanvasRenderer(t):new HotlineSVGRenderer(t);export class HotlinePolyline extends Polyline{constructor(t,e){super(t,e)}beforeAdd(t){var e;this.options.renderer="canvas"===(e=this.options).rendererType?new HotlineCanvasRenderer(e):new HotlineSVGRenderer(e),super.beforeAdd(t)}onAdd(t){super.onAdd(t),this._map.on("zoom",this._reset,this)}onRemove(t){this._map.off("zoom",this._reset,this),super.onRemove(t)}_projectLatlngs(t,e,i){if(t[0]instanceof LatLng){const n=[];for(let e=0;e<t.length;e++)n[e]=this._map.latLngToLayerPoint(t[e]),n[e].z=t[e].alt,i.extend(n[e]);e.push(n)}else for(let n=0;n<t.length;n++)this._projectLatlngs(t[n],e,i)}_clipPoints(){if(this.options.noClip)return void(this._parts=this._rings);if(this._parts=[],!this._renderer||!this._renderer._bounds)return;const t=this._parts,e=this._renderer._bounds;for(let i=0,n=0,o=this._rings.length;i<o;i++){const o=this._rings[i];for(let i=0,r=o.length;i<r-1;i++){const s=HotlineUtil.clipSegment(o[i],o[i+1],e,i,!0);s&&(t[n]=t[n]||[],t[n].push(s[0]),s[1]===o[i+1]&&i!==r-2||(t[n].push(s[1]),n++))}}}setStyle(t){return Object.assign(this.options,t),this.redraw()}}export function hotline(t,e){return new HotlinePolyline(t,e)}export default HotlinePolyline;